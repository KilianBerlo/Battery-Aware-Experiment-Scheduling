//Modest LTS model of a simple bounded retransmission protocol (simple BRP)

action snd, rcv, snd_data, rcv_data, snd_ack, rcv_ack, timeout, to;
bool success, failure;

property E_Succ = E(<>(success));                  //Check whether the message is well received (Sender received acknowledgement)
property E_Fail = E(<>(failure));                  //Check whether the message is lost (Sender did not receive acknowledgement)

process Sender(int(0..2) n)                         //The Sender can send a message up to three times before the process flows into a deadlock
{
  snd_data {= n-- =};
  alt{
  ::rcv_ack {= success = true =}
  ::timeout; alt {
    ::when(n > 0) Sender(n)                         //Retry
    ::when(n == 0) {= failure = true =};
      stop                                          //Deadlock on failure
    }
  }
}

process Receiver()                                  //Receiver sends an acknowledgement message out to the Sender
{
  rcv_data; snd_ack; Receiver()
}

process Channel()                                   //Lossy (some data gets discarded) communication channel
{
  snd; alt{
  ::rcv
  ::timeout                                         //Message lost
  };
  Channel()
}

par{                                                //In parallel are working: a Sender, a Receiver and two Channels that are inbetween the Sender and the Receiver
::Sender(2)
::relabel {to} by {timeout}
  {
    par{
    ::relabel{snd,      rcv}                        //Relabel{snd, rcv} by {snd_*, rcv_*} Channel() used to create multiple instances of the Channel() process
           by{snd_data, rcv_data} Channel()
    ::relabel{snd,      rcv,     timeout}
           by{snd_ack,  rcv_ack, to} Channel()
    }
  }
::Receiver()
}
