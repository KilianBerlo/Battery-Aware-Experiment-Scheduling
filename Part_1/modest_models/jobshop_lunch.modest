//Modest TA model of a job shop model where a worker has to go for lunch during the first working day (= 8 hours = 480 clock ticks)

action start_job, job_done, start_machine, machine_done;
int(0..1) jobs_in_progress = 0;
int(0..160) jobs_done = 0;
bool had_lunch = false;
clock time;

//The amount of jobs done in one working day (8 hours) can never exceed 11, and at the end of a working day there will not be any job in progress and the worker will have had lunch
property E_time = E(<>(time == 480 && jobs_in_progress == 0 && jobs_done >= 11 && had_lunch == true));

process Worker()
{
  clock x;                                                                      //With the internal clock the workers time without his/her lunch is tracked
  invariant(false) alt{
  ::when(had_lunch == false && time >= 180 && time <= 300) {= x = 0 =};
        invariant(x <= 30) when(x >= 30) {= had_lunch = true =}                 //The worker has to take a lunch break of no more and no less than 30 minutes
     			    
  ::start_job;                        //Worker starts the job immediately after which
    invariant(false) start_machine;   //it starts the machine first thing when the job is started
    machine_done;                     //When the machine is done
    invariant(false) job_done         //the job of the Worker is also done immediately after the machine is done
  };
  Worker()                            //Then the worker starts the process from the beginning
}

process Factory()                     //The Factory keeps track of the number of jobs that are in progess and the number of jobs that are done
{
  alt{
	:: start_job {= jobs_in_progress = jobs_in_progress + 1 =}                                                   //When the job is started by the Worker, one more job in the Factory is in progress
	:: alt{
	 :: when(jobs_done == 160) job_done {= jobs_in_progress = jobs_in_progress - 1 =}                            //When the job is done and already 160 jobs are done no incrementation of the jobs_done count is applied
	 :: when(jobs_done <= 159) job_done {= jobs_done = jobs_done + 1, jobs_in_progress = jobs_in_progress - 1 =} //When the job is done, one more job is marked as done
	 }
     };
  Factory()
}

process Machine()
{
  clock x;                                          //An internal clock of the machine keeps track of how long the machine executes a job (which should be between 40 and 50 minutes)
  start_machine {= x = 0 =};                        //When the Worker starts the machine the machine's clock is reset to 0
  invariant(x <= 50) when(x >= 40) machine_done;    //It takes between 40 and 50 minutes for the machine to be done
  Machine()
}

par                                                 //Worker, Factory and Machine run in parallel
{
:: Worker()
:: Factory()
:: Machine()
}
